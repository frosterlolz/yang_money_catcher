import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:localization/localization.dart';
import 'package:ui_kit/ui_kit.dart';
import 'package:yang_money_catcher/features/transactions/domain/bloc/transaction_bloc/transaction_bloc.dart';
import 'package:yang_money_catcher/features/transactions/presentation/screens/transaction_screen.dart';
import 'package:yang_money_catcher/main.dart' as app;

import '../../utils/widget_tester_x.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  setUp(() {
    TestWidgetsFlutterBinding.ensureInitialized();
    FlutterError.onError = (FlutterErrorDetails details) {
      FlutterError.presentError(details);
      fail(details.exceptionAsString());
    };
  });

  group('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏', () {
    testWidgets('–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–†–∞—Å—Ö–æ–¥)', (WidgetTester tester) async {
      // === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ===

      app.main();
      await tester.asyncFinder(finder: () => find.byKey(const Key('fab_expense')));
      await tester.pumpAndSettle();
      final tilesCount = find.byType(ListTile).evaluate().length;
      expect(tilesCount, equals(0));

      // === –û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ (–±–æ—Ç–æ–º—à–∏—Ç) –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä–∞—Å—Ö–æ–¥) ===

      await tester.tap(find.byKey(const Key('fab_expense')));
      await tester.pumpAndSettle();
      expect(find.byType(TransactionScreen), findsOneWidget);

      // === –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π ===

      // üîΩ –î–æ–±–∏—Ä–∞–µ–º—Å—è –¥–æ "—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ" —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π –∏ –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)
      final context = tester.firstElement(find.byType(TransactionScreen));
      final transactionBloc = context.read<TransactionBloc>();
      expect(transactionBloc.state, isA<TransactionState$Idle>());
      expect(transactionBloc.state.transaction, isNull);

      // üîΩ –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ —Å—á—ë—Ç–∞
      await tester.tap(find.byKey(const Key('account_tile')));
      await tester.pumpAndSettle();
      await tester.tap(find.byKey(const Key('account_item_0')));
      await tester.pumpAndSettle();

      // üîΩ –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏
      await tester.tap(find.byKey(const Key('category_tile')));
      await tester.pumpAndSettle();
      await tester.tap(find.byKey(const Key('transaction_category_0')));
      await tester.pumpAndSettle();

      // üîΩ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è —Å—É–º–º—ã
      // üîΩ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª–µ —Å—É–º–º—ã –¥–æ—Å—Ç—É–ø–Ω–æ
      expect(find.byKey(const Key('amount_tile')), findsOneWidget);

      // üîΩ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å—É–º–º—ã
      await tester.tap(find.byKey(const Key('amount_tile')));
      await tester.pumpAndSettle();

      // üîΩ –í–≤–æ–¥ —Å—É–º–º—ã
      await tester.enterText(find.byKey(const Key('amount_input_field')), '100');
      await tester.pumpAndSettle();

      // üîΩ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞
      await tester.tap(find.byKey(const Key('confirm_button')));
      await tester.pumpAndSettle();

      // üîΩ –í—ã–±–æ—Ä –¥–∞—Ç—ã
      await tester.tap(find.byKey(const Key('date_tile')));
      await tester.pumpAndSettle();
      await tester.tap(find.text(context.l10n.ok));
      await tester.pumpAndSettle();

      // üîΩ –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
      await tester.tap(find.byKey(const Key('time_tile')));
      await tester.pumpAndSettle();
      await tester.tap(find.text(context.l10n.ok));
      await tester.pumpAndSettle();

      // üîΩ –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      await tester.tap(find.byKey(const Key('comment_tile')));
      await tester.pumpAndSettle();
      await tester.enterText(find.byKey(const Key('TextConfirmDialog.textFormField')), '–û–±–µ–¥');
      await tester.tap(find.byKey(const Key('TextConfirmDialog.confirmButton')));
      await tester.pumpAndSettle();

      // üîΩ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      await tester.tap(find.byKey(const Key('save_transaction_button')));
      await tester.pump(); // —Å—Ç–∞—Ä—Ç –∞–Ω–∏–º–∞—Ü–∏–∏

      // üîΩ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–ø—Ç–æ–º—ã —Å–æ—Å–æ—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      expect(transactionBloc.state, isA<TransactionState$Processing>());
      expect(find.byType(TypedProgressIndicator), findsOneWidget);

      // üîΩ –ñ–¥—ë–º –ø–æ–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—á–µ–∑–Ω–µ—Ç (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
      await tester.asyncFinder(finder: () => find.byType(TypedProgressIndicator), isEmptyFinder: true);

      // üîΩ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π settle
      await tester.pumpAndSettle();

      // üîΩ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã–ª—Å—è
      expect(find.byKey(const Key('create_transaction_screen')), findsNothing);

      // üîΩ –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç–∫—Ä–∞–Ω –∑–∞–∫—Ä—ã–ª—Å—è
      expect(find.byType(TransactionScreen), findsNothing);
      // üîΩ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—è–≤–∏–ª—Å—è —Ç–∞–π–ª —Å total –∏ —Ç–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
      expect(find.byType(ListTile), findsAtLeastNWidgets(2));
    });
  });
}
